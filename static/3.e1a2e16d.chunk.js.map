{"version":3,"sources":["webpack:///static/3.e1a2e16d.chunk.js","webpack:///./README.md?27e7","webpack:///./README.md"],"names":["webpackJsonp","707","module","exports","__webpack_require__","React","createReactClass","PageRenderer","__esModule","default","WrappedPageRenderer","displayName","getInitialState","content","componentWillMount","render","createElement","Object","assign","this","props","state","__catalog_loader__","711"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAAUC,EAAQC,EAASC,GCFjC,GAAAC,GAAAD,EAAA,GACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,KAAAG,YACAA,GAAAC,aACAD,IAAAE,QAEA,IAAAC,GAAAJ,GACAK,YAAA,sBACAC,gBAAA,WACA,OAAgBC,QAAAT,EAAA,OAEhBU,mBAAA,aAUAC,OAAA,WACA,MAAAV,GAAAW,cAAAT,EAAAU,OAAAC,UAAiEC,KAAAC,OAAeP,QAAAM,KAAAE,MAAAR,aAGhFH,GAAAY,oBAAA,EACApB,EAAAC,QAAAO,GDUMa,IACA,SAAUrB,EAAQC,GEtCxBD,EAAAC,QAAA","file":"static/3.e1a2e16d.chunk.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ 707:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var React = __webpack_require__(2);\n    var createReactClass = __webpack_require__(34);\n    var PageRenderer = __webpack_require__(269).PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: __webpack_require__(711)};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (false) {\n          module.hot.accept(\"!!./node_modules/raw-loader/index.js!./README.md\", function() {\n            component.setState({\n              content: require(\"!!./node_modules/raw-loader/index.js!./README.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n/***/ }),\n\n/***/ 711:\n/***/ (function(module, exports) {\n\nmodule.exports = \"# @unstats/components\\n\\nThis library contains [React](https://facebook.github.io/react/) components that can be reused across web applications. None of these components manage state. State is managed in each web application.\\n\\n## Explore\\n\\nYou can explore all components by launching the catalog:\\n\\n    yarn start\\n\\nand open your browser at [http://localhost:4000/](http://localhost:4000/). You can also explore the catalog online: [https://unstats.github.io/components/](https://unstats.github.io/components/).\\n\\n## Installation\\n\\nThis package is currently not being published to [NPM](https://www.npmjs.com/). You can install it directly from [GitHub](https://github.com/). Go to [releases page](https://github.com/UNStats/components/releases) and look up the link to tarball `unstats-component-vX.Y.Z.tgz` of the latest release and run\\n\\n    yarn add <link_to_tarball>\\n\\n## Test\\n\\nTesting is done with with [Jest](https://facebook.github.io/jest/) using [react-testing-library](https://github.com/kentcdodds/react-testing-library). Run\\n\\n    yarn test\\n\\nto execute all tests. In order to run a single test file, e.g. for debugging, you need to provide a pattern that matches the test file:\\n\\n    yarn test <pattern>\\n\\nFor instance\\n\\n    yarn test Dropdown\\n\\nruns `src/Dropdown/Dropdown.test.jsx`. In order to run only specific tests within a test file, you can use\\n[`test.only`](https://facebook.github.io/jest/docs/api.html#testonlyname-fn) from Jest's API.\\n\\n## Debugging\\n\\nThere are two things you might want to debug: components displayed in the styleguide and tests. For each scenario you need to be able to place `debugger` statements in your code.\\n\\n### Debugging Components\\n\\nDebugging components is the same as debugging any other JavaScript code running in the browser. Set your breakpoints as needed in the component source code. Then open\\n[Chrome DevTools](https://developers.google.com/web/tools/chrome-devtools/) and switch to the **Sources** tab. The styleguide is configured to create sourcemaps that Chrome picks up to map between the actually running transpiled ES5 code and original ES2015 source code for a seamless debugging experience.\\n\\n### Debugging Tests\\n\\nTests run outside the browser with [Node](https://nodejs.org/en/). After placing `debugger` statement in a test file, run\\n\\n    yarn run test:debug <pattern>\\n\\nto start a debugging session. You can then attach a debugger to the running test with one of these two methods:\\n\\n* In [Chrome](https://www.google.com/chrome/) launch a tab at `chrome://inspect` click on **inspect**.\\n* In [Visual Studio Code](https://code.visualstudio.com/) launch the `test:debug` launch configuration defined in folder `.vscode`.\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/3.e1a2e16d.chunk.js","\n    var React = require('react');\n    var createReactClass = require('create-react-class');\n    var PageRenderer = require('catalog').PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: require(\"!!./node_modules/raw-loader/index.js!./README.md\")};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (module.hot) {\n          module.hot.accept(\"!!./node_modules/raw-loader/index.js!./README.md\", function() {\n            component.setState({\n              content: require(\"!!./node_modules/raw-loader/index.js!./README.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./README.md\n// module id = 707\n// module chunks = 3","module.exports = \"# @unstats/components\\n\\nThis library contains [React](https://facebook.github.io/react/) components that can be reused across web applications. None of these components manage state. State is managed in each web application.\\n\\n## Explore\\n\\nYou can explore all components by launching the catalog:\\n\\n    yarn start\\n\\nand open your browser at [http://localhost:4000/](http://localhost:4000/). You can also explore the catalog online: [https://unstats.github.io/components/](https://unstats.github.io/components/).\\n\\n## Installation\\n\\nThis package is currently not being published to [NPM](https://www.npmjs.com/). You can install it directly from [GitHub](https://github.com/). Go to [releases page](https://github.com/UNStats/components/releases) and look up the link to tarball `unstats-component-vX.Y.Z.tgz` of the latest release and run\\n\\n    yarn add <link_to_tarball>\\n\\n## Test\\n\\nTesting is done with with [Jest](https://facebook.github.io/jest/) using [react-testing-library](https://github.com/kentcdodds/react-testing-library). Run\\n\\n    yarn test\\n\\nto execute all tests. In order to run a single test file, e.g. for debugging, you need to provide a pattern that matches the test file:\\n\\n    yarn test <pattern>\\n\\nFor instance\\n\\n    yarn test Dropdown\\n\\nruns `src/Dropdown/Dropdown.test.jsx`. In order to run only specific tests within a test file, you can use\\n[`test.only`](https://facebook.github.io/jest/docs/api.html#testonlyname-fn) from Jest's API.\\n\\n## Debugging\\n\\nThere are two things you might want to debug: components displayed in the styleguide and tests. For each scenario you need to be able to place `debugger` statements in your code.\\n\\n### Debugging Components\\n\\nDebugging components is the same as debugging any other JavaScript code running in the browser. Set your breakpoints as needed in the component source code. Then open\\n[Chrome DevTools](https://developers.google.com/web/tools/chrome-devtools/) and switch to the **Sources** tab. The styleguide is configured to create sourcemaps that Chrome picks up to map between the actually running transpiled ES5 code and original ES2015 source code for a seamless debugging experience.\\n\\n### Debugging Tests\\n\\nTests run outside the browser with [Node](https://nodejs.org/en/). After placing `debugger` statement in a test file, run\\n\\n    yarn run test:debug <pattern>\\n\\nto start a debugging session. You can then attach a debugger to the running test with one of these two methods:\\n\\n* In [Chrome](https://www.google.com/chrome/) launch a tab at `chrome://inspect` click on **inspect**.\\n* In [Visual Studio Code](https://code.visualstudio.com/) launch the `test:debug` launch configuration defined in folder `.vscode`.\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./README.md\n// module id = 711\n// module chunks = 3"],"sourceRoot":""}